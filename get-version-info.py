import os
import io
import subprocess
from datetime import datetime
from SCons.Script import Import, BUILD_TARGETS, COMMAND_LINE_TARGETS

env = DefaultEnvironment()  # як у вас

def write_if_changed(path: str, content: str) -> None:
    old = None
    try:
        with io.open(path, "r", encoding="utf-8") as f:
            old = f.read()
    except FileNotFoundError:
        pass

    if old == content:
        print(f"[pre] {path} unchanged")
        return

    os.makedirs(os.path.dirname(path), exist_ok=True)
    with io.open(path, "w", encoding="utf-8", newline="\n") as f:
        f.write(content)
    print(f"[pre] wrote {path}")

def set_build_env_variables():
    # --- git short hash ---
    try:
        git_hash = subprocess.run(
            ["git", "rev-parse", "--short", "HEAD"],
            stdout=subprocess.PIPE,
            text=True,
            check=True,
            cwd="./",
        ).stdout.strip()
    except Exception as e:
        print(f"[pre] Could not get git hash: {e}")
        git_hash = "N/A"

    # --- version from include/version.h ---
    version = "N/A"
    try:
        with open("./include/version.h", "r", encoding="utf-8") as f:
            for line in f:
                if "#define FIRMWARE_VERSION" in line:
                    version = line.split('"')[1]
                    break
    except FileNotFoundError:
        print("[pre] Warning: ./include/version.h not found.")

    build_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    print(f"[pre] PIO_VERSION: {version}")
    print(f"[pre] GIT_HASH: {git_hash}")
    print(f"[pre] BUILD_TIMESTAMP: {build_timestamp}")

    # --- instead of env.Append(CPPDEFINES=...), write a header ---
    header = f"""// Auto-generated by get-version-info.py. DO NOT EDIT.
#pragma once
#define FIRMWARE_VERSION "{version}"
#define GIT_HASH "{git_hash}"
#define BUILD_TIMESTAMP "{build_timestamp}"
"""
    write_if_changed(os.path.join("include", "build_info.h"), header)

def should_run():
    bt = {str(t) for t in BUILD_TARGETS}
    ct = {str(t) for t in COMMAND_LINE_TARGETS}
    print(f"targets: {sorted(bt)}")
    print(f"Command line targets: {sorted(ct)}")

    if not bt and not ct:
        return True  # звичайний pio run/pio build

    wanted = {"build", "buildprog", "upload", "program", "run", "test"}
    return bool(wanted & bt) or bool(wanted & ct)

if should_run():
    set_build_env_variables()
else:
    print("[pre] skip version script")
